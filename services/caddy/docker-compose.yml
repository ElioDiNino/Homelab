services:
  caddy:
    image: ghcr.io/eliodinino/homelab/caddy:latest
    build: .
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - data:/data
      - config:/config
    ports:
      - 80:80
      - 443:443
      - 443:443/udp
    cap_add:
      - NET_ADMIN
    networks:
      - proxy-internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      CADDY_INGRESS_NETWORKS: proxy-internal
      ENVIRONMENT: ${ENVIRONMENT:?error}
      EMAIL: ${EMAIL:?error}
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN:?error}
      INTERNAL_DOMAIN: ${INTERNAL_DOMAIN:?error}
      DASHBOARD_SUBDOMAIN: ${DASHBOARD_SUBDOMAIN:?error}
      PROXMOX_HOST: ${PROXMOX_HOST:?error}
      HEXOS_HOST: ${HEXOS_HOST:?error}
      HAOS_HOST: ${HAOS_HOST:?error}
      SENTRY_CSP_ENDPOINT: ${SENTRY_CSP_ENDPOINT:?error}

  caddy-config:
    image: traefik/whoami:latest
    restart: unless-stopped
    networks:
      - proxy-internal
    labels:
      #### Global Settings ####
      caddy_0.email: "{env.EMAIL}"
      caddy_0.acme_dns: "cloudflare {env.CLOUDFLARE_API_TOKEN}"
      caddy_0.dns: "cloudflare {env.CLOUDFLARE_API_TOKEN}"
      caddy_0.ech: "ech.{$$INTERNAL_DOMAIN}"

      # When debugging, use debug flag and staging server
      # caddy_0.debug: ""
      # caddy_0.acme_ca: https://acme-staging-v02.api.letsencrypt.org/directory

      #### Snippets ####

      # Get wildcard certificate
      caddy_1: (wildcard)
      caddy_1.tls.dns: "cloudflare {env.CLOUDFLARE_API_TOKEN}"
      caddy_1.tls.resolvers: 1.1.1.1 1.0.0.1

      # Skip TLS verify for backend with self-signed HTTPS
      caddy_2: (https)
      caddy_2.transport: http
      caddy_2.transport.tls: ""
      caddy_2.transport.tls_insecure_skip_verify: ""

      #### Wildcard Definitions ####
      caddy_10: "*.{$$INTERNAL_DOMAIN}"
      caddy_10.import: wildcard

      #### Static Definitions ####

      # This debugging container
      # https://github.com/traefik/whoami
      caddy_99: whoami.{$$INTERNAL_DOMAIN}
      caddy_99.reverse_proxy: "{{ upstreams 80 }}"

      # Internal access check
      caddy_100: "ping.{$$INTERNAL_DOMAIN}"
      caddy_100.header.Access-Control-Allow-Origin: "*"
      caddy_100.respond: "`{\"result\": \"Success!\",\"dashboard\": \"https://{$$DASHBOARD_SUBDOMAIN}.{$$INTERNAL_DOMAIN}\"}` 200"

      # Proxmox
      caddy_101: "pve.{$$INTERNAL_DOMAIN}"
      caddy_101.reverse_proxy: "{$$PROXMOX_HOST}:8006"
      caddy_101.reverse_proxy.import: https

      # TrueNAS
      caddy_102: "truenas.{$$INTERNAL_DOMAIN}"
      caddy_102.reverse_proxy: "{$$HEXOS_HOST}:80"

      # Home Assistant OS
      caddy_103: "ha.{$$INTERNAL_DOMAIN}"
      caddy_103.reverse_proxy: "{$$HAOS_HOST}:8123"

networks:
  proxy-internal:
    external: true

volumes:
  data:
  config:
